1. AN ADMISSIBLE HEURISTIC: An admissible (or more usefully, a consistent) heuristic is the basis of finding an improved informed search. Usually admissible heuristics can be achieved through the relaxation of problems. In the snowman domain, we can consider a relaxed version of a problem set by looking at an instance where no obstacles exist. Here, an estimation from a current state to the goal can simply be a distance measure (as we are looking down on a 2D movement space) -- Manhattan distance, which is the most optimal possible distance heuristic for grid-based movement (compared strictly to other distance heuristics, such as Euclidean distance). Initially, we just calculate the Manhattan distance for each individual snowball, from their positions to the goal position, and treat snowball stacks as doubled instances of individual snowballs. This gives us a basic heuristic that is an optimistic admissible function providing a numerical value of a current state mapped to a goal. 

2. IMPROVING ON A HEURISTIC: Improvements on heuristics require that the heuristic maintain consistency/admissibility (that is, any changes made to a heuristic to improve it must keep the principle that costs between states and the goal are optimistic underestimations, hence the earlier use of relaxed problems). A simple addition to the Manhattan distance heuristic that achieves this is the Manhattan tiebreaker. First, Manhattan distance is calculated as usual. But now, we also consider two vectors, represented by their positions: the position of the robot relative to the goal, and the position of the snowball we are currently looking at, relative to the goal. All we do now is take the cross product, and add its value (multiplied by a reductive constant, to act only as an "influencing value", not a "dominating value") to the Manhattan distance. The use of the cross product here is to break ties by making states that are in a "straight line direction" to the goal slightly more favourable, using vector cross product properties. This avoids plateau phenomenon, where searches can stall because of tied values.

3. DEADLOCKS AND CORNER CASES: Manhattan distance alone fails to take into account a key mechanic of the game: the robot can only push a snowball in an adjacent direction. This means that the snowball can get stuck in corners, or on walls that the goal does not also border. To take this into account, the heuristic can be improved through incorporation of checking for these "deadlock states" which result in immediate or eventual failure, and make them extremely disfavourable for the search algorithm to visit by giving them an extremely high heuristic score. Corners come in three families: wall-wall, wall-obstacle, and obstacle-obstacle, and need to be dealt with in cases. As well, snowballs that hit one of the four walls of the game board, but are at a wall that isn't also where a goal is, are considered failures because they will eventually result in immovable corner cases without reaching a goal. In either case the heuristic can return an extremely large, unfavourable heuristic value so that these states can be disregarded and later pruned, to increase search performance.

4. TIMING AND PROCESSING POWER: Processing power is key in experimental testing. On an ultrabook laptop running an Intel i5 processor, running these searches with and without Google chrome running resulted in improvements in performance from 14/20 correct solutions found to 16/20 solutions, a result that takes the function from failing to reach the benchmark to surpassing it. The lesson here is that testing and timing are typically influenced by a combination of processor power and the amount of load a processor can take on. It is important to test heuristics when a computer has the most minimum load on its processor possible, so to maximize performance.

5. FUTURE IMPROVEMENTS, THEORY: These heuristics are primarily inspired by analysis of the Sokoban series of problems, which are in a sense a superset domain of the snowman puzzle (multiple objects to multiple goals, rather than three objects to a single goal). Sokoban heuristics typically include heavy amounts of deadlock checking -- occasionally drawing upon bipartite graph algorithms and pattern database heuristics which, combined with the automated learning of common deadlock patterns and powerful processors, can solve even hard Sokoban puzzles optimally. In the case of the snowman domain, a clear improvement on the current heuristic is deadlock wall checking when "walls of obstacles" are present, which act similar to wall deadlocks but only to a certain point where more "axes of movement for the snowballs" open up again. 

Tanuj Kumar

